name: Release docker

on:
  workflow_call:

jobs:
  prepare:
    name: 'prepare docker'
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.set-env.outputs.docker }}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
      # Fetch tags
      - name: Fetch tags
        run: git fetch --tags
      # Set tags if they point to the current commit
      - name: Set tag
        run: echo "TAGS=$(git tag --points-at | jq  --raw-input .  | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Collect all directories (except integrations) with a Dockerfile and NO release target
      - name: Collect docker targets
        run: echo "DOCKER=$(find protocol/ runtime/ tools/ -maxdepth 2 -type f -name 'Makefile' | xargs -n1 dirname | xargs -n1 basename | jq --raw-input . | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Output tags that match the targets
      - name: Output docker tags
        id: output-tags
        uses: actions/github-script@v7
        with:
         script: |
           const { DOCKER, TAGS } = process.env
           console.log(DOCKER)
           console.log(TAGS)
           
           const docker = JSON.parse(JSON.parse(DOCKER))
           const tags = JSON.parse(JSON.parse(TAGS))
           
           const selectedTags = tags.filter(it => docker.includes(it.trim().split('/')[1]?.split('@')[0]))
           
           console.log(selectedTags)
           return JSON.stringify(JSON.stringify(selectedTags))
         result-encoding: string
      # Print var
      - name: Print var
        run: |
          echo ${{ steps.output-tags.outputs.result }}
      # Set tags
      - name: Set tags
        id: set-env
        run: echo "::set-output name=docker::${{steps.output-tags.outputs.result}}"

  release:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.docker != '[]'
    strategy:
      matrix:
        docker: ${{fromJSON(needs.prepare.outputs.docker)}}
    steps:
      # Checkout the repository
      - name: Check out repository code
        uses: actions/checkout@v4
      # Extract working directory ("runtime/tendermint-ssync@1.2.3" -> "runtime/tendermint-ssync")
      - name: Extract working directory
        run: echo "WORKING_DIR=$(echo ${{ matrix.docker }} | cut -d '@' -f 1)" >> $GITHUB_ENV
      # Set working directory
      - name: Set working directory
        run: cd ${{ env.WORKING_DIR }}
      # Tag docker image
      - name: Tag docker image
        uses: softprops/action-gh-release@v1
        with:
          #          body_path: RELEASE_BODY.md
#          files: ${{ env.WORKING_DIR }}/release/*
          tag_name: ${{ matrix.tag }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
