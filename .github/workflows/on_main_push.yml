name: On main push

on:
  push:
    branches: [ main ]
    tags:
      - '*'

jobs:
#  releases:
#    uses: ./.github/workflows/releases.yml
#  release-please:
#    uses: ./.github/workflows/release-please.yml

#  change-finder:
#    runs-on: ubuntu-latest
#    outputs:
#      projects: ${{ steps.check-changes.outputs.projects }}
#    steps:
#      # Checkout the repository including all tags
#      - name: Checkout the repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          ref: main
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#
##      - name: Install dependencies
##        run: npm ci
#
#      - name: Check changes
#        id: check-changes
#        run: node .github/scripts/check_changes.js

#  check-output:
#    runs-on: ubuntu-latest
#    needs: change-finder
#    steps:
#      - name: Print outputs
#        run: echo ${{ needs.change-finder.outputs.projects }}

#  project-finder:
#    runs-on: ubuntu-latest
#    outputs:
#      projects: ${{ steps.check-changes.outputs.projects }}
#    steps:
#      # Checkout the repository
#      - name: Checkout the repository
#        uses: actions/checkout@v4
#        with:
#          ref: main
#
#      # List all projects in common, protocol, runtime, and tools (excluding common/proto)
#      - name: List projects
#        id: list-projects
#        run: |
#          projects=$(ls -d common/* protocol/* runtime/* tools/* | grep -v 'common/proto')
#          projects_json=toJSON($projects)
#          echo "::set-output name=projects::$projects_json"

  project-finder:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.check-changes.outputs.projects }}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@main
        with:
          ref: main
      # List all projects in common, protocol, runtime, and tools (excluding common/proto)
      - name: List projects
        id: list-projects
        run: |
          projects=$(ls -d common/* protocol/* runtime/* tools/* | grep -v 'common/proto')
          echo "PROJECTS=$(echo $projects | jq -R -s -c 'split(" ")')" >> $GITHUB_ENV
      # Output projects
      - name: Output projects
        id: output-projects
        uses: actions/github-script@v7
        with:
          script: |
            const { PROJECTS } = process
            console.log(PROJECTS)
            return JSON.stringify(JSON.stringify(PROJECTS))
          result-encoding: string
      # Print projects
      - name: Print projects
        run: |
          echo ${{ steps.list-projects.outputs.result }}
      # Set tags
      - name: Set tags
        id: set-env
        run: echo "::set-output name=projects::${{steps.list-projects.outputs.result}}"


  print-projects:
    runs-on: ubuntu-latest
    needs: project-finder
    steps:
      - name: Print projects
        run: echo ${{ fromJson(needs.project-finder.outputs.projects) }}

  release-please-release:
    runs-on: ubuntu-latest
#    needs: change-finder
    needs: project-finder
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.project-finder.outputs.projects) }}
#        project: ${{ fromJson(needs.project-finder.outputs.projects) }}
#        project: ${{fromJSON('["tools/kystrap", "tools/kysor", "common/goutils", "protocol/core", "runtime/tendermint", ]')}}
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: tag-release
        with:
          path: ${{ matrix.project }}
          release-type: simple
#          token: ${{ secrets.GITHUB_TOKEN }}
#          release-type: node
#          monorepo-tags: true
#          package-name: ${{ matrix.package }}
#          command: github-release
#      - uses: actions/checkout@v4
#        if: ${{ steps.tag-release.outputs.releases_created }}
#      - uses: pnpm/action-setup@v2
#        with:
#          version: 8
#      - uses: actions/setup-node@v3
#        if: ${{ steps.tag-release.outputs.releases_created }}
#        with:
#          node-version: 16
#          registry-url: 'https://external-dot-oss-automation.appspot.com/'
#          cache: 'pnpm'
#      - name: publish
#        if: ${{ steps.tag-release.outputs.releases_created }}
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
#        run: |
#          pnpm install
#          pnpm publish --filter ${{ matrix.package }} --no-git-checks --access public