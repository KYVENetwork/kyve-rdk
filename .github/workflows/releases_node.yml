name: Create node releases

on:
  workflow_call:

jobs:
  prepare:
    name: 'Prepare node releases'
    runs-on: ubuntu-latest
    outputs:
      output-tags: ${{ steps.set-env.outputs.tags }}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@main
        with:
          ref: 'main'
      # Fetch tags
      - name: Fetch tags
        run: git fetch --tags
      # Collect package names in common/ with a package.json and NO Dockerfile
      - name: Collect package names
        run: echo "PACKAGE=$(find common/ -maxdepth 2 -type f -name 'package.json' ! -execdir test -e './Dockerfile' \; -print | xargs -n1 dirname | xargs -n1 basename | jq --raw-input . | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Set tags if they point to the current commit
      - name: Set tag
        run: echo "TAGS=$(git tag --points-at | jq  --raw-input .  | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Output tags that match the typescript package names
      - name: Output typescript tags
        id: output-tags
        uses: actions/github-script@v7
        with:
          script: |
            const { PACKAGE, TAGS } = process.env;
            console.log(PACKAGE);
            console.log(TAGS);
            const package = JSON.parse(JSON.parse(PACKAGE));
            const tags = JSON.parse(JSON.parse(TAGS));
            const selectedTags = tags.filter(it => package.includes(it.trim().split('/')[1]?.split('@')[0]))
            console.log(selectedTags)
            return JSON.stringify(JSON.stringify(selectedTags))
          result-encoding: string
      # Print vars
      - name: Print vars
        run: |
          echo ${{ steps.output-tags.outputs.result }}
      # Set tags
      - name: Set tags
        id: set-env
        run: echo "::set-output name=tags::${{steps.output-tags.outputs.result}}"

  release:
    name: 'Release'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.output-tags != '[]'
    strategy:
      matrix:
        tag: ${{fromJSON(needs.prepare.outputs.output-tags)}}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@main
        with:
          ref: 'main'
      # Set package name
      - name: Set package name
        run: echo "PACKAGE_NAME=$(echo ${{ matrix.tag }} | awk -F'[/@]' '{print $3}' | sed 's/ *$//g')" >> $GITHUB_ENV
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      # Setup lerna
      - name: Setup lerna
        run: yarn setup
      # Print package name
      - name: Print package name
        run: echo ${{ env.PACKAGE_NAME }}
      # Build
      - name: build
        run: yarn build
      # Generate Release Body
      - name: Generate Release Body
        run: npx extract-changelog-release  ${{ github.workspace }}/common/${{env.PACKAGE_NAME}}/CHANGELOG.md > RELEASE_BODY.md
      # Publish the Release
      - name: Publish the Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_BODY.md
          tag_name: ${{ matrix.tag }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
