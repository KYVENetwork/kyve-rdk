name: Create go releases

on:
  workflow_call:

jobs:
  prepare:
    name: 'prepare go releases'
    runs-on: ubuntu-latest
    outputs:
      output-tags: ${{ steps.set-env.outputs.tags }}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@main
        with:
          ref: 'main'
      # Fetch tags
      - name: Fetch tags
        run: git fetch --tags
      # Collect all directories in tools/ with a Makefile and a release target
      - name: Collect go package names
        run: echo "GO_PACKAGE=$(find tools/ -maxdepth 2 -type f -name 'Makefile' -exec grep -q 'release:' {} \; -print | xargs -n1 dirname | xargs -n1 basename | jq --raw-input . | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Set tags if they point to the current commit
      - name: Set tag
        run: echo "TAGS=$(git tag --points-at | jq  --raw-input .  | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Output tags that match the go package names
      - name: Output go tags
        id: output-tags
        uses: actions/github-script@v7
        with:
          script: |
            const { GO_PACKAGE, TAGS } = process.env
            console.log(GO_PACKAGE)
            console.log(TAGS)
            const goPackage = JSON.parse(JSON.parse(GO_PACKAGE))
            const tags = JSON.parse(JSON.parse(TAGS))
            const selectedTags = tags.filter(it => goPackage.includes(it.trim().split('/')[1]?.split('@')[0]))
            console.log(selectedTags)
            return JSON.stringify(JSON.stringify(selectedTags))
          result-encoding: string
      # Print vars
      - name: Print vars
        run: |
          echo ${{ steps.output-tags.outputs.result }}
      # Set tags
      - name: Set tags
        id: set-env
        run: echo "::set-output name=tags::${{steps.output-tags.outputs.result}}"

  release:
    name: 'release'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.output-tags != '[]'
    strategy:
      matrix:
        tag: ${{fromJSON(needs.prepare.outputs.output-tags)}}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
      # Set working directory
      - name: Set working directory
        run: echo "WORKING_DIR=tools/$(echo ${{ matrix.tag }} | awk -F'[/@]' '{print $3}' | sed 's/ *$//g')" >> $GITHUB_ENV
      # Set version
      - name: Set version
        run: echo "VERSION=$(echo ${{ matrix.tag }} | awk -F'[/@]' '{print $4}')" >> $GITHUB_ENV
      # Setup Golang from woring directory
      - name: 🐿 Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ env.WORKING_DIR }}/go.mod
      # Build
      - name: Build
        run: make release
        working-directory: ${{ env.WORKING_DIR }}
        env:
          VERSION: ${{ env.VERSION }}
        # TODO: Generate release body
#      # Generate Release Body
#      - name: Generate Release Body
#        run: npx extract-changelog-release  ${{ github.workspace }}/${{env.WORKING_DIR}}/CHANGELOG.md > RELEASE_BODY.md
      # Publish the Release
      - name: Publish the Release
        uses: softprops/action-gh-release@v1
        with:
#          body_path: RELEASE_BODY.md
          files: ${{ env.WORKING_DIR }}/release/*
          tag_name: ${{ matrix.tag }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
