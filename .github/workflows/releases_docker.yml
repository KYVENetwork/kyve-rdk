name: Create go releases

on:
  workflow_call:

jobs:
  prepare:
    name: 'Prepare docker releases'
    runs-on: ubuntu-latest
    outputs:
      output-tags: ${{ steps.set-env.outputs.tags }}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@main
        with:
          ref: 'main'
      # Fetch tags
      - name: Fetch tags
        run: git fetch --tags
      # Set tags if they point to the current commit
      - name: Set tag
        run: echo "TAGS=$(git tag --points-at | jq  --raw-input .  | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Collect all directories (except integrations) with a Dockerfile and NO release target
      - name: Collect common and tools
        run:  echo "DOCKER=$(find common/ tools/ -maxdepth 2 -type f -name 'Makefile' -exec grep -L 'release:' {} \; | xargs -n1 dirname | xargs -n1 basename | jq --raw-input . | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Collect all integrations with a Dockerfile and NO release target
      - name: Collect integrations
        run:  echo "INTEGRATIONS=$(find integrations/ -maxdepth 2 -type f -name 'Makefile' -exec grep -L 'release:' {} \; | xargs -n1 dirname | xargs -n1 basename | jq --raw-input . | jq --slurp . | jq tostring)" >> $GITHUB_ENV
      # Output tags that match the targets
      - name: Output docker tags
        id: output-tags
        uses: actions/github-script@v7
        with:
          script: |
            const { DOCKER, INTEGRATIONS, TAGS } = process.env
            console.log(DOCKER)
            console.log(INTEGRATIONS)
            console.log(TAGS)
            
            const docker = JSON.parse(JSON.parse(DOCKER))
            const integrations = JSON.parse(JSON.parse(INTEGRATIONS))
            const tags = JSON.parse(JSON.parse(TAGS))
            
            const dockerTags = tags.filter(it => docker.includes(it.trim().split('/')[1]?.split('@')[0]))
            const integrationTags = tags.filter(it => integrations.includes(it.trim().split('/')[2]?.split('@')[0]))
            
            const selectedTags = [...dockerTags, ...integrationTags]
            
            console.log(selectedTags)
            return JSON.stringify(JSON.stringify(selectedTags))
          result-encoding: string
      # Print vars
      - name: Print vars
        run: |
          echo ${{ steps.output-tags.outputs.result }}
      # Set tags
      - name: Set tags
        id: set-env
        run: echo "::set-output name=tags::${{steps.output-tags.outputs.result}}"

  release:
    name: 'Release'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.output-tags != '[]'
    strategy:
      matrix:
        tag: ${{fromJSON(needs.prepare.outputs.output-tags)}}
    steps:
      # Publish the Release
      - name: Publish the Release
        uses: softprops/action-gh-release@v1
        with:
#          body_path: RELEASE_BODY.md
#          files: ${{ env.WORKING_DIR }}/release/*
          tag_name: ${{ matrix.tag }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
