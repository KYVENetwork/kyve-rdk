name: Build docker images check

on:
  workflow_call:

jobs:
  prepare:
    name: 'prepare docker'
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.set-env.outputs.docker }}
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4
      # Collect all directories with a Dockerfile and get their full path (exclude templates)
      - name: Collect docker targets
        id: collect
        shell: bash
        run: |
          DOCKER=$(find . -type f -name 'Dockerfile' -exec dirname {} \; | grep -v 'kystrap/templates' | jq --raw-input . | jq --slurp . | jq tostring)
          echo "::set-output name=DOCKER::$DOCKER"
      # Print var
      - name: Print var
        run: |  
          echo ${{ steps.collect.outputs.DOCKER }}
      # Set var
      - name: Set var
        id: set-env
        run: echo "::set-output name=docker::${{steps.collect.outputs.DOCKER}}"

  build-docker-image:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.docker != '[]'
    strategy:
      matrix:
        docker: ${{fromJSON(needs.prepare.outputs.docker)}}
    steps:
      # Checkout the repository
      - name: Check out repository code
        uses: actions/checkout@v4
      # Set working directory
      - name: Set working directory
        run: cd ${{ matrix.docker }}
      # Build docker image
      - name: Build docker image
        run: docker build -t ${{ matrix.docker }} .

